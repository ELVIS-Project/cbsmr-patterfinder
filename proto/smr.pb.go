// Code generated by protoc-gen-go. DO NOT EDIT.
// source: smr.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IndexRequest_Encoding int32

const (
	IndexRequest_UNKNOWN IndexRequest_Encoding = 0
	IndexRequest_BASE64  IndexRequest_Encoding = 1
	IndexRequest_UTF8    IndexRequest_Encoding = 2
)

var IndexRequest_Encoding_name = map[int32]string{
	0: "UNKNOWN",
	1: "BASE64",
	2: "UTF8",
}

var IndexRequest_Encoding_value = map[string]int32{
	"UNKNOWN": 0,
	"BASE64":  1,
	"UTF8":    2,
}

func (x IndexRequest_Encoding) String() string {
	return proto.EnumName(IndexRequest_Encoding_name, int32(x))
}

func (IndexRequest_Encoding) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{0, 0}
}

type IndexRequest struct {
	SymbolicData         []byte                `protobuf:"bytes,1,opt,name=symbolic_data,json=symbolicData,proto3" json:"symbolic_data,omitempty"`
	Encoding             IndexRequest_Encoding `protobuf:"varint,2,opt,name=encoding,proto3,enum=proto.IndexRequest_Encoding" json:"encoding,omitempty"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *IndexRequest) Reset()         { *m = IndexRequest{} }
func (m *IndexRequest) String() string { return proto.CompactTextString(m) }
func (*IndexRequest) ProtoMessage()    {}
func (*IndexRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{0}
}

func (m *IndexRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexRequest.Unmarshal(m, b)
}
func (m *IndexRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexRequest.Marshal(b, m, deterministic)
}
func (m *IndexRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexRequest.Merge(m, src)
}
func (m *IndexRequest) XXX_Size() int {
	return xxx_messageInfo_IndexRequest.Size(m)
}
func (m *IndexRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IndexRequest proto.InternalMessageInfo

func (m *IndexRequest) GetSymbolicData() []byte {
	if m != nil {
		return m.SymbolicData
	}
	return nil
}

func (m *IndexRequest) GetEncoding() IndexRequest_Encoding {
	if m != nil {
		return m.Encoding
	}
	return IndexRequest_UNKNOWN
}

type AddPieceRequest struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Notes                []*Note  `protobuf:"bytes,2,rep,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPieceRequest) Reset()         { *m = AddPieceRequest{} }
func (m *AddPieceRequest) String() string { return proto.CompactTextString(m) }
func (*AddPieceRequest) ProtoMessage()    {}
func (*AddPieceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{1}
}

func (m *AddPieceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPieceRequest.Unmarshal(m, b)
}
func (m *AddPieceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPieceRequest.Marshal(b, m, deterministic)
}
func (m *AddPieceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPieceRequest.Merge(m, src)
}
func (m *AddPieceRequest) XXX_Size() int {
	return xxx_messageInfo_AddPieceRequest.Size(m)
}
func (m *AddPieceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPieceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AddPieceRequest proto.InternalMessageInfo

func (m *AddPieceRequest) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *AddPieceRequest) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

type AddPieceResponse struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddPieceResponse) Reset()         { *m = AddPieceResponse{} }
func (m *AddPieceResponse) String() string { return proto.CompactTextString(m) }
func (*AddPieceResponse) ProtoMessage()    {}
func (*AddPieceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{2}
}

func (m *AddPieceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddPieceResponse.Unmarshal(m, b)
}
func (m *AddPieceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddPieceResponse.Marshal(b, m, deterministic)
}
func (m *AddPieceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPieceResponse.Merge(m, src)
}
func (m *AddPieceResponse) XXX_Size() int {
	return xxx_messageInfo_AddPieceResponse.Size(m)
}
func (m *AddPieceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPieceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AddPieceResponse proto.InternalMessageInfo

func (m *AddPieceResponse) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type AllPiecesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllPiecesRequest) Reset()         { *m = AllPiecesRequest{} }
func (m *AllPiecesRequest) String() string { return proto.CompactTextString(m) }
func (*AllPiecesRequest) ProtoMessage()    {}
func (*AllPiecesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{3}
}

func (m *AllPiecesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllPiecesRequest.Unmarshal(m, b)
}
func (m *AllPiecesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllPiecesRequest.Marshal(b, m, deterministic)
}
func (m *AllPiecesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPiecesRequest.Merge(m, src)
}
func (m *AllPiecesRequest) XXX_Size() int {
	return xxx_messageInfo_AllPiecesRequest.Size(m)
}
func (m *AllPiecesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPiecesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllPiecesRequest proto.InternalMessageInfo

type AllPiecesResponse struct {
	Pids                 []uint32 `protobuf:"varint,1,rep,packed,name=pids,proto3" json:"pids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllPiecesResponse) Reset()         { *m = AllPiecesResponse{} }
func (m *AllPiecesResponse) String() string { return proto.CompactTextString(m) }
func (*AllPiecesResponse) ProtoMessage()    {}
func (*AllPiecesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{4}
}

func (m *AllPiecesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllPiecesResponse.Unmarshal(m, b)
}
func (m *AllPiecesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllPiecesResponse.Marshal(b, m, deterministic)
}
func (m *AllPiecesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPiecesResponse.Merge(m, src)
}
func (m *AllPiecesResponse) XXX_Size() int {
	return xxx_messageInfo_AllPiecesResponse.Size(m)
}
func (m *AllPiecesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPiecesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllPiecesResponse proto.InternalMessageInfo

func (m *AllPiecesResponse) GetPids() []uint32 {
	if m != nil {
		return m.Pids
	}
	return nil
}

type Note struct {
	Onset                float32  `protobuf:"fixed32,1,opt,name=onset,proto3" json:"onset,omitempty"`
	Offset               float32  `protobuf:"fixed32,2,opt,name=offset,proto3" json:"offset,omitempty"`
	PitchB40             int32    `protobuf:"varint,3,opt,name=pitch_b40,json=pitchB40,proto3" json:"pitch_b40,omitempty"`
	PieceIdx             uint32   `protobuf:"varint,6,opt,name=piece_idx,json=pieceIdx,proto3" json:"piece_idx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Note) Reset()         { *m = Note{} }
func (m *Note) String() string { return proto.CompactTextString(m) }
func (*Note) ProtoMessage()    {}
func (*Note) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{5}
}

func (m *Note) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Note.Unmarshal(m, b)
}
func (m *Note) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Note.Marshal(b, m, deterministic)
}
func (m *Note) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Note.Merge(m, src)
}
func (m *Note) XXX_Size() int {
	return xxx_messageInfo_Note.Size(m)
}
func (m *Note) XXX_DiscardUnknown() {
	xxx_messageInfo_Note.DiscardUnknown(m)
}

var xxx_messageInfo_Note proto.InternalMessageInfo

func (m *Note) GetOnset() float32 {
	if m != nil {
		return m.Onset
	}
	return 0
}

func (m *Note) GetOffset() float32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Note) GetPitchB40() int32 {
	if m != nil {
		return m.PitchB40
	}
	return 0
}

func (m *Note) GetPieceIdx() uint32 {
	if m != nil {
		return m.PieceIdx
	}
	return 0
}

type Notes struct {
	Notes                []*Note  `protobuf:"bytes,1,rep,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Notes) Reset()         { *m = Notes{} }
func (m *Notes) String() string { return proto.CompactTextString(m) }
func (*Notes) ProtoMessage()    {}
func (*Notes) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{6}
}

func (m *Notes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Notes.Unmarshal(m, b)
}
func (m *Notes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Notes.Marshal(b, m, deterministic)
}
func (m *Notes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Notes.Merge(m, src)
}
func (m *Notes) XXX_Size() int {
	return xxx_messageInfo_Notes.Size(m)
}
func (m *Notes) XXX_DiscardUnknown() {
	xxx_messageInfo_Notes.DiscardUnknown(m)
}

var xxx_messageInfo_Notes proto.InternalMessageInfo

func (m *Notes) GetNotes() []*Note {
	if m != nil {
		return m.Notes
	}
	return nil
}

type Vector struct {
	Start                *Note    `protobuf:"bytes,1,opt,name=start,proto3" json:"start,omitempty"`
	End                  *Note    `protobuf:"bytes,2,opt,name=end,proto3" json:"end,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vector) Reset()         { *m = Vector{} }
func (m *Vector) String() string { return proto.CompactTextString(m) }
func (*Vector) ProtoMessage()    {}
func (*Vector) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{7}
}

func (m *Vector) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vector.Unmarshal(m, b)
}
func (m *Vector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vector.Marshal(b, m, deterministic)
}
func (m *Vector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vector.Merge(m, src)
}
func (m *Vector) XXX_Size() int {
	return xxx_messageInfo_Vector.Size(m)
}
func (m *Vector) XXX_DiscardUnknown() {
	xxx_messageInfo_Vector.DiscardUnknown(m)
}

var xxx_messageInfo_Vector proto.InternalMessageInfo

func (m *Vector) GetStart() *Note {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Vector) GetEnd() *Note {
	if m != nil {
		return m.End
	}
	return nil
}

type Measure struct {
	SymbolicData         []byte   `protobuf:"bytes,1,opt,name=symbolic_data,json=symbolicData,proto3" json:"symbolic_data,omitempty"`
	Number               uint32   `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	NoteIdx              uint32   `protobuf:"varint,3,opt,name=note_idx,json=noteIdx,proto3" json:"note_idx,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Measure) Reset()         { *m = Measure{} }
func (m *Measure) String() string { return proto.CompactTextString(m) }
func (*Measure) ProtoMessage()    {}
func (*Measure) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{8}
}

func (m *Measure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Measure.Unmarshal(m, b)
}
func (m *Measure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Measure.Marshal(b, m, deterministic)
}
func (m *Measure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Measure.Merge(m, src)
}
func (m *Measure) XXX_Size() int {
	return xxx_messageInfo_Measure.Size(m)
}
func (m *Measure) XXX_DiscardUnknown() {
	xxx_messageInfo_Measure.DiscardUnknown(m)
}

var xxx_messageInfo_Measure proto.InternalMessageInfo

func (m *Measure) GetSymbolicData() []byte {
	if m != nil {
		return m.SymbolicData
	}
	return nil
}

func (m *Measure) GetNumber() uint32 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *Measure) GetNoteIdx() uint32 {
	if m != nil {
		return m.NoteIdx
	}
	return 0
}

type Measures struct {
	Measures             []*Measure `protobuf:"bytes,1,rep,name=measures,proto3" json:"measures,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Measures) Reset()         { *m = Measures{} }
func (m *Measures) String() string { return proto.CompactTextString(m) }
func (*Measures) ProtoMessage()    {}
func (*Measures) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{9}
}

func (m *Measures) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Measures.Unmarshal(m, b)
}
func (m *Measures) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Measures.Marshal(b, m, deterministic)
}
func (m *Measures) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Measures.Merge(m, src)
}
func (m *Measures) XXX_Size() int {
	return xxx_messageInfo_Measures.Size(m)
}
func (m *Measures) XXX_DiscardUnknown() {
	xxx_messageInfo_Measures.DiscardUnknown(m)
}

var xxx_messageInfo_Measures proto.InternalMessageInfo

func (m *Measures) GetMeasures() []*Measure {
	if m != nil {
		return m.Measures
	}
	return nil
}

type VectorsCsv struct {
	Csv                  string   `protobuf:"bytes,1,opt,name=csv,proto3" json:"csv,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorsCsv) Reset()         { *m = VectorsCsv{} }
func (m *VectorsCsv) String() string { return proto.CompactTextString(m) }
func (*VectorsCsv) ProtoMessage()    {}
func (*VectorsCsv) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{10}
}

func (m *VectorsCsv) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorsCsv.Unmarshal(m, b)
}
func (m *VectorsCsv) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorsCsv.Marshal(b, m, deterministic)
}
func (m *VectorsCsv) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorsCsv.Merge(m, src)
}
func (m *VectorsCsv) XXX_Size() int {
	return xxx_messageInfo_VectorsCsv.Size(m)
}
func (m *VectorsCsv) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorsCsv.DiscardUnknown(m)
}

var xxx_messageInfo_VectorsCsv proto.InternalMessageInfo

func (m *VectorsCsv) GetCsv() string {
	if m != nil {
		return m.Csv
	}
	return ""
}

type Occurrence struct {
	Pid                  uint32   `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	Notes                []uint32 `protobuf:"varint,2,rep,packed,name=notes,proto3" json:"notes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Occurrence) Reset()         { *m = Occurrence{} }
func (m *Occurrence) String() string { return proto.CompactTextString(m) }
func (*Occurrence) ProtoMessage()    {}
func (*Occurrence) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{11}
}

func (m *Occurrence) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Occurrence.Unmarshal(m, b)
}
func (m *Occurrence) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Occurrence.Marshal(b, m, deterministic)
}
func (m *Occurrence) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Occurrence.Merge(m, src)
}
func (m *Occurrence) XXX_Size() int {
	return xxx_messageInfo_Occurrence.Size(m)
}
func (m *Occurrence) XXX_DiscardUnknown() {
	xxx_messageInfo_Occurrence.DiscardUnknown(m)
}

var xxx_messageInfo_Occurrence proto.InternalMessageInfo

func (m *Occurrence) GetPid() uint32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *Occurrence) GetNotes() []uint32 {
	if m != nil {
		return m.Notes
	}
	return nil
}

type Occurrences struct {
	Occurrences          []*Occurrence `protobuf:"bytes,1,rep,name=occurrences,proto3" json:"occurrences,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Occurrences) Reset()         { *m = Occurrences{} }
func (m *Occurrences) String() string { return proto.CompactTextString(m) }
func (*Occurrences) ProtoMessage()    {}
func (*Occurrences) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ce62a8635f91dac, []int{12}
}

func (m *Occurrences) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Occurrences.Unmarshal(m, b)
}
func (m *Occurrences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Occurrences.Marshal(b, m, deterministic)
}
func (m *Occurrences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Occurrences.Merge(m, src)
}
func (m *Occurrences) XXX_Size() int {
	return xxx_messageInfo_Occurrences.Size(m)
}
func (m *Occurrences) XXX_DiscardUnknown() {
	xxx_messageInfo_Occurrences.DiscardUnknown(m)
}

var xxx_messageInfo_Occurrences proto.InternalMessageInfo

func (m *Occurrences) GetOccurrences() []*Occurrence {
	if m != nil {
		return m.Occurrences
	}
	return nil
}

func init() {
	proto.RegisterEnum("proto.IndexRequest_Encoding", IndexRequest_Encoding_name, IndexRequest_Encoding_value)
	proto.RegisterType((*IndexRequest)(nil), "proto.IndexRequest")
	proto.RegisterType((*AddPieceRequest)(nil), "proto.AddPieceRequest")
	proto.RegisterType((*AddPieceResponse)(nil), "proto.AddPieceResponse")
	proto.RegisterType((*AllPiecesRequest)(nil), "proto.AllPiecesRequest")
	proto.RegisterType((*AllPiecesResponse)(nil), "proto.AllPiecesResponse")
	proto.RegisterType((*Note)(nil), "proto.Note")
	proto.RegisterType((*Notes)(nil), "proto.Notes")
	proto.RegisterType((*Vector)(nil), "proto.Vector")
	proto.RegisterType((*Measure)(nil), "proto.Measure")
	proto.RegisterType((*Measures)(nil), "proto.Measures")
	proto.RegisterType((*VectorsCsv)(nil), "proto.VectorsCsv")
	proto.RegisterType((*Occurrence)(nil), "proto.Occurrence")
	proto.RegisterType((*Occurrences)(nil), "proto.Occurrences")
}

func init() { proto.RegisterFile("smr.proto", fileDescriptor_3ce62a8635f91dac) }

var fileDescriptor_3ce62a8635f91dac = []byte{
	// 596 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xc5, 0x76, 0xed, 0x3a, 0x93, 0xb8, 0x75, 0x07, 0x54, 0x4c, 0xf8, 0x50, 0x58, 0x0e, 0x44,
	0x95, 0x28, 0x55, 0x1a, 0xaa, 0x22, 0x24, 0xa4, 0x86, 0x16, 0xa9, 0x20, 0x52, 0xb4, 0xa1, 0x70,
	0x8c, 0x1c, 0x7b, 0x4b, 0x2d, 0x25, 0x76, 0xf0, 0x3a, 0x55, 0xf8, 0x2f, 0xfc, 0x02, 0x0e, 0xfc,
	0x46, 0xb4, 0xeb, 0xb5, 0x9d, 0x26, 0x41, 0xe2, 0xe4, 0x9d, 0xf7, 0xde, 0xcc, 0xbe, 0x99, 0xf5,
	0x40, 0x8d, 0x4f, 0xd2, 0xfd, 0x69, 0x9a, 0x64, 0x09, 0x9a, 0xf2, 0x43, 0x7e, 0x69, 0xd0, 0x38,
	0x8f, 0x43, 0x36, 0xa7, 0xec, 0xc7, 0x8c, 0xf1, 0x0c, 0x9f, 0x81, 0xc3, 0x7f, 0x4e, 0x46, 0xc9,
	0x38, 0x0a, 0x86, 0xa1, 0x9f, 0xf9, 0x9e, 0xd6, 0xd2, 0xda, 0x0d, 0xda, 0x28, 0xc0, 0x53, 0x3f,
	0xf3, 0xf1, 0x18, 0x6c, 0x16, 0x07, 0x49, 0x18, 0xc5, 0xdf, 0x3d, 0xbd, 0xa5, 0xb5, 0xb7, 0x3a,
	0x8f, 0xf2, 0xb2, 0xfb, 0x8b, 0xb5, 0xf6, 0xcf, 0x94, 0x86, 0x96, 0x6a, 0xf2, 0x02, 0xec, 0x02,
	0xc5, 0x3a, 0x6c, 0x5e, 0xf6, 0x3f, 0xf6, 0x2f, 0xbe, 0xf5, 0xdd, 0x3b, 0x08, 0x60, 0xf5, 0x4e,
	0x06, 0x67, 0x47, 0x5d, 0x57, 0x43, 0x1b, 0x36, 0x2e, 0xbf, 0xbc, 0x3f, 0x76, 0x75, 0x72, 0x0a,
	0xdb, 0x27, 0x61, 0xf8, 0x39, 0x62, 0x01, 0x2b, 0x0c, 0x6e, 0x81, 0x1e, 0x85, 0xd2, 0x95, 0x43,
	0xf5, 0x28, 0xc4, 0xa7, 0x60, 0xc6, 0x49, 0xc6, 0xb8, 0xa7, 0xb7, 0x8c, 0x76, 0xbd, 0x53, 0x57,
	0x46, 0xfa, 0x49, 0xc6, 0x68, 0xce, 0x10, 0x02, 0x6e, 0x55, 0x85, 0x4f, 0x93, 0x98, 0xb3, 0xe5,
	0x32, 0x04, 0xc1, 0x3d, 0x19, 0x8f, 0xa5, 0x86, 0xab, 0xab, 0xc8, 0x73, 0xd8, 0x59, 0xc0, 0x54,
	0x22, 0xc2, 0xc6, 0x34, 0x0a, 0xb9, 0xa7, 0xb5, 0x8c, 0xb6, 0x43, 0xe5, 0x99, 0xc4, 0xb0, 0x21,
	0xee, 0xc3, 0x7b, 0x60, 0x0a, 0x4d, 0x26, 0xeb, 0xea, 0x34, 0x0f, 0x70, 0x17, 0xac, 0xe4, 0xea,
	0x4a, 0xc0, 0xba, 0x84, 0x55, 0x84, 0x0f, 0xa1, 0x36, 0x8d, 0xb2, 0xe0, 0x7a, 0x38, 0xea, 0x1e,
	0x78, 0x46, 0x4b, 0x6b, 0x9b, 0xd4, 0x96, 0x40, 0xaf, 0x7b, 0x90, 0x93, 0x2c, 0x60, 0xc3, 0x28,
	0x9c, 0x7b, 0x96, 0xb4, 0x69, 0x4b, 0xe0, 0x3c, 0x9c, 0x93, 0x3d, 0x30, 0xc5, 0x7d, 0xbc, 0x6a,
	0x5e, 0xfb, 0x67, 0xf3, 0x1f, 0xc0, 0xfa, 0xca, 0x82, 0x2c, 0x49, 0x85, 0x98, 0x67, 0x7e, 0x9a,
	0xbb, 0x5b, 0x16, 0x4b, 0x06, 0x1f, 0x83, 0xc1, 0xe2, 0x50, 0xfa, 0x5c, 0x12, 0x08, 0x9c, 0xf8,
	0xb0, 0xf9, 0x89, 0xf9, 0x7c, 0x96, 0xb2, 0xff, 0xfb, 0x4f, 0x76, 0xc1, 0x8a, 0x67, 0x93, 0x11,
	0x4b, 0x65, 0x45, 0x87, 0xaa, 0x08, 0x1f, 0x80, 0x2d, 0xcc, 0xc9, 0xde, 0x0c, 0xc9, 0x6c, 0x8a,
	0x58, 0xb4, 0x76, 0x04, 0xb6, 0xba, 0x82, 0xe3, 0x1e, 0xd8, 0x13, 0x75, 0x56, 0x0d, 0x6e, 0x29,
	0x4b, 0x4a, 0x42, 0x4b, 0x9e, 0x3c, 0x01, 0xc8, 0xdb, 0xe4, 0xef, 0xf8, 0x0d, 0xba, 0x60, 0x04,
	0xfc, 0x46, 0x7a, 0xaa, 0x51, 0x71, 0x24, 0x5d, 0x80, 0x8b, 0x20, 0x98, 0xa5, 0x29, 0x8b, 0x03,
	0x26, 0xf8, 0x69, 0xf9, 0xfc, 0xe2, 0x28, 0x9e, 0xae, 0xfa, 0x8d, 0x9c, 0x62, 0x78, 0x3d, 0xa8,
	0x57, 0x59, 0x1c, 0x0f, 0xa1, 0x9e, 0x54, 0xa1, 0xf2, 0xb4, 0xa3, 0x3c, 0x55, 0x42, 0xba, 0xa8,
	0xea, 0xfc, 0xd6, 0xc0, 0x94, 0x6b, 0x81, 0x2f, 0x01, 0xe4, 0x21, 0x7f, 0xbb, 0xbb, 0x6b, 0x56,
	0xa6, 0xd9, 0x58, 0x98, 0x39, 0xc7, 0x57, 0xe0, 0x48, 0xb6, 0x9c, 0xc8, 0xda, 0x9c, 0xed, 0xdb,
	0x43, 0xe1, 0xf8, 0x1a, 0xb6, 0xa5, 0x60, 0x61, 0x20, 0x6b, 0x13, 0x0b, 0xe7, 0x95, 0xae, 0xf3,
	0x47, 0x03, 0x63, 0x30, 0x49, 0x71, 0x0f, 0xac, 0x01, 0xf3, 0xd3, 0xe0, 0x1a, 0x6f, 0x39, 0x6a,
	0xe2, 0x4a, 0xb3, 0x1c, 0xdf, 0x80, 0x5d, 0xac, 0x17, 0xee, 0x2a, 0x7e, 0x69, 0x6b, 0x9b, 0xf7,
	0x57, 0x70, 0xb5, 0x4e, 0x6f, 0xa1, 0x56, 0xee, 0x18, 0x96, 0xaa, 0xa5, 0x4d, 0x6c, 0x7a, 0xab,
	0x44, 0x9e, 0x3f, 0xb2, 0x24, 0x71, 0xf8, 0x37, 0x00, 0x00, 0xff, 0xff, 0x95, 0x45, 0xb5, 0x73,
	0xdb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IndexClient is the client API for Index service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IndexClient interface {
	IndexNotes(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*Notes, error)
	IndexMeasures(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*Measures, error)
	IndexVectorsCsv(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*VectorsCsv, error)
}

type indexClient struct {
	cc *grpc.ClientConn
}

func NewIndexClient(cc *grpc.ClientConn) IndexClient {
	return &indexClient{cc}
}

func (c *indexClient) IndexNotes(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*Notes, error) {
	out := new(Notes)
	err := c.cc.Invoke(ctx, "/proto.Index/IndexNotes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexClient) IndexMeasures(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*Measures, error) {
	out := new(Measures)
	err := c.cc.Invoke(ctx, "/proto.Index/IndexMeasures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexClient) IndexVectorsCsv(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*VectorsCsv, error) {
	out := new(VectorsCsv)
	err := c.cc.Invoke(ctx, "/proto.Index/IndexVectorsCsv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndexServer is the server API for Index service.
type IndexServer interface {
	IndexNotes(context.Context, *IndexRequest) (*Notes, error)
	IndexMeasures(context.Context, *IndexRequest) (*Measures, error)
	IndexVectorsCsv(context.Context, *IndexRequest) (*VectorsCsv, error)
}

func RegisterIndexServer(s *grpc.Server, srv IndexServer) {
	s.RegisterService(&_Index_serviceDesc, srv)
}

func _Index_IndexNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServer).IndexNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Index/IndexNotes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServer).IndexNotes(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Index_IndexMeasures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServer).IndexMeasures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Index/IndexMeasures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServer).IndexMeasures(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Index_IndexVectorsCsv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexServer).IndexVectorsCsv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Index/IndexVectorsCsv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexServer).IndexVectorsCsv(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Index_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Index",
	HandlerType: (*IndexServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IndexNotes",
			Handler:    _Index_IndexNotes_Handler,
		},
		{
			MethodName: "IndexMeasures",
			Handler:    _Index_IndexMeasures_Handler,
		},
		{
			MethodName: "IndexVectorsCsv",
			Handler:    _Index_IndexVectorsCsv_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smr.proto",
}

// SmrClient is the client API for Smr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmrClient interface {
	Search(ctx context.Context, in *Notes, opts ...grpc.CallOption) (*Occurrences, error)
	AddPiece(ctx context.Context, in *AddPieceRequest, opts ...grpc.CallOption) (*AddPieceResponse, error)
	AllPieces(ctx context.Context, in *AllPiecesRequest, opts ...grpc.CallOption) (*AllPiecesResponse, error)
}

type smrClient struct {
	cc *grpc.ClientConn
}

func NewSmrClient(cc *grpc.ClientConn) SmrClient {
	return &smrClient{cc}
}

func (c *smrClient) Search(ctx context.Context, in *Notes, opts ...grpc.CallOption) (*Occurrences, error) {
	out := new(Occurrences)
	err := c.cc.Invoke(ctx, "/proto.Smr/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smrClient) AddPiece(ctx context.Context, in *AddPieceRequest, opts ...grpc.CallOption) (*AddPieceResponse, error) {
	out := new(AddPieceResponse)
	err := c.cc.Invoke(ctx, "/proto.Smr/AddPiece", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smrClient) AllPieces(ctx context.Context, in *AllPiecesRequest, opts ...grpc.CallOption) (*AllPiecesResponse, error) {
	out := new(AllPiecesResponse)
	err := c.cc.Invoke(ctx, "/proto.Smr/AllPieces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmrServer is the server API for Smr service.
type SmrServer interface {
	Search(context.Context, *Notes) (*Occurrences, error)
	AddPiece(context.Context, *AddPieceRequest) (*AddPieceResponse, error)
	AllPieces(context.Context, *AllPiecesRequest) (*AllPiecesResponse, error)
}

func RegisterSmrServer(s *grpc.Server, srv SmrServer) {
	s.RegisterService(&_Smr_serviceDesc, srv)
}

func _Smr_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Notes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmrServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Smr/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmrServer).Search(ctx, req.(*Notes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smr_AddPiece_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPieceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmrServer).AddPiece(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Smr/AddPiece",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmrServer).AddPiece(ctx, req.(*AddPieceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Smr_AllPieces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPiecesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmrServer).AllPieces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Smr/AllPieces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmrServer).AllPieces(ctx, req.(*AllPiecesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Smr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Smr",
	HandlerType: (*SmrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _Smr_Search_Handler,
		},
		{
			MethodName: "AddPiece",
			Handler:    _Smr_AddPiece_Handler,
		},
		{
			MethodName: "AllPieces",
			Handler:    _Smr_AllPieces_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smr.proto",
}
